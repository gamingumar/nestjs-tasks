var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.8","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.303,1,1.961]],["body/modules/AppModule.html",[0,2.002,1,3.646,2,1.56,3,1.56,4,1.935,5,1.935,6,1.56,7,2.644,8,1.935,9,2.534,10,2.534,11,2.821,12,0.036,13,3.129,14,2.644,15,1.935,16,1.935,17,0.34,18,0.293,19,0.457,20,3.055,21,2.994,22,3.055,23,1.56,24,1.56,25,1.56,26,0.814,27,1.56,28,1.73,29,1.071,30,1.73,31,2.191,32,2.191,33,2.364,34,2.895,35,3.055,36,1.56,37,1.73,38,1.73,39,1.73,40,1.73,41,1.73,42,3.055,43,3.055,44,3.055,45,1.73,46,1.73,47,1.73,48,1.73,49,1.068,50,0.893,51,3.055,52,2.191,53,1.286,54,2.191,55,3.055,56,2.534,57,3.055,58,1.56,59,0.34,60,0.127,61,0.017,62,0.023,63,0.017]],["title/controllers/AuthController.html",[64,1.581,65,1.961]],["body/controllers/AuthController.html",[12,0.036,17,0.28,18,0.242,19,0.411,23,1.284,24,1.284,25,1.284,26,0.671,27,1.284,28,1.425,29,0.882,30,1.425,33,2.062,34,2.657,36,1.284,37,1.425,38,1.425,39,1.425,40,1.425,41,1.425,45,1.425,46,1.425,47,1.425,48,1.425,49,1.036,50,0.735,58,1.284,59,0.28,60,0.104,61,0.014,62,0.02,63,0.014,64,1.284,65,2.306,66,2.087,67,2.087,68,2.516,69,0.242,70,1.398,71,2.402,72,3.021,73,2.612,74,3.021,75,2.087,76,2.933,77,1.981,78,3.642,79,1.141,80,2.516,81,1.643,82,1.5,83,0.463,84,1.5,85,1.643,86,2.171,87,1.804,88,3.642,89,2.516,90,2.516,91,2.516,92,2.516,93,1.371,94,2.087,95,2.516,96,2.612,97,2.612,98,2.516,99,2.516,100,2.087,101,2.087,102,2.087,103,2.087,104,2.516,105,1.804,106,1.804,107,2.185,108,2.087,109,2.087,110,1.425,111,1.593,112,2.087,113,1.804,114,2.516,115,1.593,116,1.059,117,2.516,118,1.276,119,2.516,120,2.516,121,2.516,122,2.516,123,2.087,124,2.516,125,2.516]],["title/classes/AuthCredentialsDto.html",[60,0.128,76,1.581]],["body/classes/AuthCredentialsDto.html",[12,0.034,17,0.405,18,0.35,19,0.35,49,0.727,59,0.405,60,0.194,61,0.02,62,0.026,63,0.02,69,0.35,76,2.395,77,2.171,79,1.25,83,0.596,126,1.398,127,4.304,128,3.02,129,1.25,130,2.388,131,1.661,132,1.461,133,3.641,134,4.691,135,4.691,136,4.691,137,4.691,138,3.641,139,3.641,140,3.641,141,5.189,142,3.641,143,3.641,144,4.691,145,2.306,146,3.641,147,4.691,148,3.641,149,3.641]],["title/modules/AuthModule.html",[0,1.303,11,1.581]],["body/modules/AuthModule.html",[0,1.834,2,1.326,3,1.326,4,1.644,5,1.644,6,1.326,7,2.759,8,2.759,11,2.874,12,0.036,14,2.359,15,1.644,16,1.644,17,0.289,18,0.249,19,0.418,21,1.862,23,1.326,24,1.326,25,1.326,26,0.692,27,1.326,28,1.471,29,0.91,30,1.471,33,2.11,34,2.696,36,1.326,37,1.471,38,1.471,39,1.471,40,1.471,41,1.471,45,1.471,46,1.471,47,1.471,48,1.471,49,1.14,50,0.759,52,1.862,53,1.093,58,1.902,59,0.289,60,0.108,61,0.015,62,0.021,63,0.015,65,2.759,96,1.862,97,1.862,107,2.678,108,2.154,110,1.471,150,2.154,151,2.154,152,2.154,153,3.308,154,1.862,155,2.597,156,2.597,157,2.154,158,2.154,159,2.597,160,2.597,161,1.326,162,1.862,163,2.597,164,1.862,165,3.726,166,1.568,167,2.154,168,3.09,169,1.093,170,2.597,171,1.202,172,2.597,173,2.154,174,2.597,175,2.597,176,2.597,177,1.471,178,2.597,179,2.597,180,1.471,181,2.597,182,2.597]],["title/injectables/AuthService.html",[107,1.581,183,1.433]],["body/injectables/AuthService.html",[12,0.036,17,0.286,18,0.247,19,0.247,49,1.076,50,0.753,53,1.084,59,0.286,60,0.107,61,0.014,62,0.021,63,0.014,69,0.247,70,1.422,71,2.421,72,3.073,73,2.657,75,3.073,76,2.868,79,1.264,81,1.665,82,1.52,83,0.551,84,1.52,85,1.422,86,2.195,87,2.657,93,0.753,105,1.847,106,1.847,107,1.891,113,1.847,115,2.346,116,2.115,118,1.298,129,0.987,131,1.388,161,2.671,162,1.847,164,1.847,166,1.084,171,2.007,183,1.714,184,1.631,185,2.137,186,3.401,187,2.137,188,5.391,189,3.704,190,2.576,191,2.576,192,1.631,193,1.459,194,1.826,195,3.704,196,2.137,197,1.847,198,2.098,199,2.137,200,2.137,201,2.214,202,2.576,203,2.576,204,1.315,205,2.576,206,2.576,207,3.073,208,3.704,209,2.576,210,2.576,211,2.576,212,2.576]],["title/classes/CreateTaskDto.html",[60,0.128,213,1.581]],["body/classes/CreateTaskDto.html",[12,0.035,17,0.429,18,0.371,19,0.371,49,0.971,59,0.429,60,0.202,61,0.022,62,0.027,63,0.022,69,0.371,77,2.252,79,1.297,83,0.619,126,1.481,129,1.297,132,1.492,145,2.443,213,2.485,214,4.423,215,3.2,216,3.019,217,3.377,218,4.867,219,3.858,220,3.858,221,4.423,222,5.332,223,3.2]],["title/classes/GetTasksFilterDto.html",[60,0.128,224,1.581]],["body/classes/GetTasksFilterDto.html",[12,0.035,17,0.408,18,0.352,19,0.352,26,0.978,49,0.941,59,0.408,60,0.195,61,0.021,62,0.026,63,0.021,69,0.352,77,2.181,79,1.256,83,0.599,84,1.926,126,1.408,129,1.256,132,1.256,145,2.323,221,3.91,224,2.406,225,4.32,226,2.41,227,3.043,228,3.735,229,2.41,230,3.668,231,3.668,232,2.659,233,3.668,234,3.668,235,2.323,236,1.873,237,5.208,238,3.668,239,3.668]],["title/interfaces/IConfig.html",[240,0.991,241,1.581]],["body/interfaces/IConfig.html",[12,0.035,17,0.392,18,0.338,19,0.338,29,1.234,59,0.602,61,0.02,62,0.026,63,0.02,69,0.338,83,0.688,129,1.224,130,1.483,131,1.127,132,1.496,166,2.278,169,2.278,177,1.994,180,1.994,240,1.732,241,2.344,242,1.798,243,1.994,244,3.427,245,3.065,246,2.504,247,2.763,248,2.15,249,2.6,250,2.23,251,1.798,252,1.994,253,1.994,254,1.994,255,1.798]],["title/interfaces/IConfigDB.html",[240,0.991,246,1.433]],["body/interfaces/IConfigDB.html",[12,0.035,17,0.36,18,0.311,19,0.311,29,1.135,59,0.582,61,0.018,62,0.024,63,0.018,69,0.311,83,0.759,129,1.158,130,2.204,131,1.676,132,1.627,166,1.364,169,1.829,177,1.834,180,1.834,240,1.676,241,1.654,242,1.654,243,1.834,244,2.051,245,1.834,246,2.268,247,2.218,248,2.299,249,3.092,250,2.051,251,1.654,252,2.965,253,2.965,254,2.775,255,2.673]],["title/interfaces/IConfigJWT.html",[169,1.303,240,0.991]],["body/interfaces/IConfigJWT.html",[12,0.035,17,0.402,18,0.347,19,0.347,29,1.266,59,0.608,61,0.02,62,0.026,63,0.02,69,0.347,83,0.657,129,1.244,130,1.521,131,1.157,132,1.572,166,1.521,169,2.177,177,3.095,180,3.095,240,1.749,241,1.845,242,1.845,243,2.046,244,2.288,245,2.046,246,2.16,247,2.383,248,2.382,249,2.643,250,2.288,251,1.845,252,2.046,253,2.046,254,2.046,255,1.845]],["title/interfaces/IConfigServer.html",[240,0.991,247,1.581]],["body/interfaces/IConfigServer.html",[12,0.035,17,0.413,18,0.356,19,0.356,29,1.3,59,0.614,61,0.021,62,0.027,63,0.021,69,0.356,83,0.603,129,1.266,130,1.562,131,1.188,132,1.521,166,1.562,169,1.999,177,2.101,180,2.101,240,1.767,241,1.894,242,1.894,243,2.101,244,2.35,245,2.101,246,2.197,247,2.673,248,2.402,249,3.231,250,2.35,251,1.894,252,2.101,253,2.101,254,2.101,255,1.894]],["title/interfaces/JwtPayload.html",[198,1.753,240,0.991]],["body/interfaces/JwtPayload.html",[12,0.034,17,0.487,18,0.421,19,0.421,59,0.487,61,0.025,62,0.03,63,0.025,69,0.421,83,0.557,129,1.403,131,1.873,132,1.504,198,2.981,240,1.403,242,2.237,256,3.143,257,3.635]],["title/injectables/JwtStrategy.html",[153,1.753,183,1.433]],["body/injectables/JwtStrategy.html",[12,0.036,17,0.338,18,0.292,19,0.292,49,1.101,50,0.887,53,1.278,59,0.338,60,0.126,61,0.017,62,0.023,63,0.017,69,0.292,70,1.596,71,2.194,79,1.108,81,1.596,82,1.457,83,0.528,84,1.457,85,1.165,93,1.385,110,1.719,115,2.633,116,1.278,118,1.064,131,1.331,153,2.354,161,2.815,162,2.177,166,1.75,167,2.518,171,1.924,183,1.924,184,1.923,187,2.518,194,1.278,196,3.448,197,2.177,198,2.887,199,2.518,200,2.518,201,1.55,204,1.55,207,3.448,256,3.4,258,2.518,259,4.157,260,3.036,261,4.157,262,3.036,263,3.036,264,3.036,265,2.518,266,1.719,267,3.036,268,3.036,269,3.036,270,3.036,271,3.036,272,3.036,273,3.036]],["title/classes/Task.html",[26,0.825,60,0.128]],["body/classes/Task.html",[12,0.035,17,0.332,18,0.287,19,0.287,26,1.253,49,0.938,59,0.332,60,0.124,61,0.017,62,0.023,63,0.017,69,0.287,77,2.54,79,1.463,83,0.698,93,1.674,126,1.147,129,1.096,132,1.35,216,2.663,217,2.978,229,2.176,232,2.401,236,1.526,248,2.132,266,2.329,274,2.48,275,3.9,276,2.978,277,3.372,278,4.821,279,2.989,280,3.9,281,2.989,282,2.989,283,2.989,284,2.989,285,2.48,286,3.412,287,4.113,288,2.989,289,2.989,290,3.412,291,2.989,292,1.526,293,1.893,294,2.989,295,2.989]],["title/classes/TaskRepository.html",[60,0.128,296,1.753]],["body/classes/TaskRepository.html",[12,0.036,17,0.252,18,0.217,19,0.217,26,1.271,49,1.033,50,0.661,59,0.252,60,0.094,61,0.013,62,0.019,63,0.013,69,0.217,70,1.293,71,2.313,79,1.073,81,1.293,82,1.181,83,0.428,84,1.181,85,1.293,86,2.063,93,1.708,116,1.694,118,1.181,126,0.869,129,0.898,171,2.206,186,3.198,192,1.433,193,1.282,194,1.877,201,1.72,204,1.155,213,2.552,216,1.908,217,2.134,224,2.276,226,2.063,228,3.584,229,2.063,232,1.155,236,1.155,266,1.908,277,2.416,292,1.155,293,1.433,296,1.908,297,1.877,298,3.419,299,2.416,300,2.416,301,3.369,302,2.263,303,2.795,304,2.263,305,2.416,306,2.263,307,2.416,308,1.877,309,1.623,310,1.623,311,1.623,312,1.623,313,1.623,314,2.795,315,2.263,316,1.877,317,2.263,318,2.263,319,1.877,320,2.263,321,2.263,322,3.369,323,1.877,324,2.263,325,1.877,326,1.877,327,2.263,328,1.623,329,1.877,330,1.877,331,2.263,332,2.263,333,1.877,334,1.623,335,2.795,336,1.877,337,1.877]],["title/classes/TaskStatusValidationPipe.html",[60,0.128,338,1.961]],["body/classes/TaskStatusValidationPipe.html",[12,0.035,17,0.35,18,0.302,19,0.302,26,0.838,49,0.85,50,0.919,59,0.35,60,0.13,61,0.018,62,0.024,63,0.018,69,0.302,70,1.634,79,1.287,81,1.634,82,1.492,83,0.541,84,1.492,85,1.634,116,2.032,118,1.492,126,1.207,129,1.135,132,1.379,192,1.991,193,2.93,194,1.324,204,1.605,229,2.579,235,3.057,236,1.605,254,1.781,338,2.696,339,4.291,340,2.608,341,4.258,342,4.827,343,4.827,344,4.827,345,4.258,346,4.258,347,3.145,348,4.258,349,3.145,350,4.258,351,3.145,352,3.145,353,3.145,354,3.145,355,3.145,356,3.145,357,3.145,358,3.145]],["title/controllers/TasksController.html",[64,1.581,359,1.961]],["body/controllers/TasksController.html",[12,0.035,17,0.197,18,0.17,19,0.332,23,0.906,24,0.906,25,0.906,26,1.046,27,0.906,28,1.005,29,0.622,30,1.005,31,1.272,32,1.272,33,1.583,34,2.223,36,0.906,37,1.005,38,1.005,39,1.005,40,1.005,41,1.005,45,1.583,46,1.005,47,1.005,48,1.005,49,1.034,50,0.518,58,0.906,59,0.197,60,0.073,61,0.01,62,0.016,63,0.01,64,0.906,67,1.472,69,0.17,70,1.073,77,1.977,79,1.139,81,1.64,82,1.497,83,0.543,84,1.497,85,1.64,86,2.399,93,1.791,100,2.319,101,2.319,102,1.472,103,1.472,109,1.472,110,1.005,111,2.874,112,1.472,116,0.747,118,1.497,123,1.472,157,1.472,158,1.472,186,2.005,194,1.177,213,2.317,224,2.004,226,1.601,229,1.977,232,2.004,236,0.906,248,2.132,251,0.906,276,2.874,293,1.124,299,2.481,300,2.005,303,1.472,305,1.272,307,2.005,309,1.272,310,1.272,311,1.272,312,1.272,313,1.272,316,1.472,328,1.272,329,1.472,330,1.472,337,1.472,338,1.77,359,1.77,360,1.472,361,2.319,362,2.87,363,2.87,364,1.774,365,1.774,366,1.472,367,2.796,368,1.774,369,1.472,370,2.796,371,1.774,372,1.774,373,1.472,374,2.796,375,1.774,376,1.774,377,1.774,378,1.774,379,1.774,380,1.774,381,1.774,382,3.926,383,1.766,384,1.472,385,1.774,386,1.774,387,1.774,388,1.774,389,1.774,390,1.774,391,1.774,392,1.774,393,1.774,394,1.774,395,2.796,396,1.774,397,1.774,398,1.774,399,1.774,400,1.774,401,1.774,402,1.774,403,1.774,404,1.774,405,1.774]],["title/modules/TasksModule.html",[0,1.303,13,1.753]],["body/modules/TasksModule.html",[0,1.973,2,1.517,3,1.517,4,1.881,5,1.881,6,1.517,7,2.968,8,1.881,11,2.797,12,0.036,13,3.239,14,2.594,15,1.881,16,1.881,17,0.33,18,0.285,19,0.45,21,2.937,23,1.517,24,1.517,25,1.517,26,0.792,27,1.517,28,1.682,29,1.041,30,1.682,31,2.131,32,2.131,33,2.319,34,2.861,36,1.517,37,1.682,38,1.682,39,1.682,40,1.682,41,1.682,45,2.319,46,1.682,47,1.682,48,1.682,49,1.093,50,0.868,52,2.131,53,1.251,56,2.464,58,2.091,59,0.33,60,0.123,61,0.017,62,0.023,63,0.017,96,2.131,97,2.131,296,1.682,359,2.968,383,2.797,384,2.464,406,2.464,407,2.971,408,2.464,409,2.971,410,2.971,411,2.971,412,2.971,413,2.971,414,2.464,415,2.971]],["title/injectables/TasksService.html",[183,1.433,383,1.581]],["body/injectables/TasksService.html",[12,0.036,17,0.165,18,0.143,19,0.143,26,1.411,49,0.921,50,0.435,53,0.626,59,0.165,60,0.062,61,0.014,62,0.014,63,0.008,69,0.143,70,0.932,71,2.208,79,1.118,81,1.61,82,1.47,83,0.533,84,1.47,85,1.501,86,2.271,93,1.75,94,1.234,115,1.538,116,1.022,118,1.672,132,0.82,171,2.135,183,1.124,184,0.942,194,1.295,197,1.067,201,1.812,204,1.57,213,1.996,216,1.375,217,1.538,224,1.996,226,1.941,228,1.741,229,2.271,232,1.996,236,0.76,248,2.009,276,3.303,277,1.741,293,0.942,296,2.375,299,1.741,300,1.741,305,1.741,307,1.741,309,1.067,310,1.067,311,1.067,312,1.067,313,1.067,319,2.014,333,2.551,334,1.067,336,1.234,361,2.014,362,2.014,363,2.014,366,2.014,369,2.551,373,2.551,383,1.24,414,1.234,416,1.234,417,1.488,418,1.488,419,3.075,420,1.488,421,2.428,422,1.488,423,1.488,424,1.488,425,1.488,426,1.488,427,1.488,428,1.488,429,1.488,430,2.428,431,1.488,432,1.488,433,2.428,434,1.488,435,1.488,436,4.772,437,1.488,438,3.075,439,1.488,440,2.428,441,1.488,442,1.488,443,1.488,444,3.075,445,1.488,446,1.488,447,1.234,448,1.488,449,1.488]],["title/classes/User.html",[60,0.128,93,0.905]],["body/classes/User.html",[12,0.035,17,0.31,18,0.268,19,0.268,26,1.381,49,0.905,59,0.31,60,0.116,61,0.016,62,0.022,63,0.016,69,0.268,70,1.505,71,2.098,77,2.397,79,1.432,81,1.071,82,0.978,83,0.683,84,0.978,85,1.071,86,1.815,93,1.146,118,0.978,126,1.071,129,1.045,130,2.07,131,1.451,132,1.526,171,1.292,201,1.425,226,2.098,248,1.651,266,2.221,275,3.761,276,2.871,278,4.577,280,3.761,285,2.315,286,3.253,290,3.253,292,1.425,335,2.315,450,2.315,451,3.761,452,3.922,453,2.791,454,2.791,455,2.791,456,2.791,457,3.922,458,2.791,459,2.791,460,3.922,461,2.791,462,2.315,463,2.791,464,2.812,465,2.791,466,2.791,467,2.791,468,3.922,469,2.315,470,2.791,471,2.791]],["title/classes/UserRepository.html",[60,0.128,161,1.581]],["body/classes/UserRepository.html",[12,0.036,17,0.268,18,0.231,19,0.231,49,0.976,50,0.704,59,0.268,60,0.1,61,0.014,62,0.02,63,0.014,69,0.231,70,1.355,71,2.557,73,2.531,76,2.906,79,1.113,81,1.603,82,1.463,83,0.531,84,1.463,85,1.603,86,2.366,87,2.531,93,1.43,105,1.728,106,1.728,113,1.728,116,1.758,118,1.463,126,0.925,130,1.758,131,1.336,132,1.363,161,1.802,171,2.127,194,1.758,201,2.498,204,1.802,266,1.998,292,1.23,298,2.994,308,1.999,314,2.927,323,1.999,325,1.999,326,1.999,328,2.531,451,3.813,462,1.999,464,2.531,469,1.999,472,1.999,473,3.529,474,3.529,475,3.529,476,2.409,477,2.409,478,3.529,479,2.409,480,2.409,481,2.409,482,3.529,483,2.409,484,2.409,485,2.409,486,2.409,487,2.409,488,2.409,489,2.409,490,2.409,491,1.999,492,2.409,493,2.409,494,2.409,495,2.409,496,2.409,497,2.409,498,2.409]],["title/coverage.html",[499,3.022]],["body/coverage.html",[6,1.374,12,0.035,19,0.258,26,0.717,54,1.93,60,0.231,61,0.015,62,0.021,63,0.015,64,1.951,65,1.704,66,2.232,76,1.374,83,0.342,93,0.786,107,1.374,111,1.704,127,2.232,128,2.232,153,1.524,154,1.93,161,1.374,169,1.133,183,2.056,185,2.232,194,1.133,198,1.524,213,1.374,214,2.232,215,2.232,224,1.374,225,2.232,226,1.245,227,2.232,229,1.245,235,1.704,240,1.635,241,1.374,243,2.739,246,1.245,247,1.374,256,2.74,257,2.232,258,2.232,274,2.232,296,1.524,297,2.232,338,1.704,339,2.232,340,2.232,359,1.704,360,2.232,383,1.374,416,2.232,447,5.155,450,2.232,472,2.232,499,1.93,500,2.691,501,2.691,502,2.691,503,5.109,504,2.691,505,5.109,506,3.821,507,5.109,508,2.232,509,5.308,510,2.691,511,2.232,512,2.232,513,4.444,514,3.17,515,2.232,516,2.232,517,2.691,518,1.93,519,1.93,520,2.691,521,2.691,522,2.691]],["title/dependencies.html",[3,1.899,523,2.592]],["body/dependencies.html",[3,1.887,12,0.036,50,1.08,53,1.556,60,0.196,61,0.021,62,0.027,63,0.021,110,2.093,145,2.341,164,2.651,166,1.556,168,3.066,223,3.066,265,3.929,292,1.887,464,2.651,524,5.83,525,3.696,526,3.696,527,4.736,528,3.696,529,3.696,530,3.696,531,3.696,532,3.696,533,3.696,534,3.696,535,3.696,536,3.696,537,3.696,538,3.696,539,3.696,540,3.696,541,3.696,542,3.696,543,3.696,544,3.696,545,3.696,546,3.696,547,3.696,548,3.696]],["title/miscellaneous/enumerations.html",[549,1.323,550,3.086]],["body/miscellaneous/enumerations.html",[12,0.034,61,0.025,62,0.03,63,0.025,69,0.427,193,3.214,232,2.709,518,3.186,519,3.806,549,2.268,550,3.685,551,3.685,552,4.402,553,5.307,554,5.307]],["title/miscellaneous/functions.html",[549,1.323,555,3.086]],["body/miscellaneous/functions.html",[6,2.973,12,0.031,61,0.027,62,0.031,63,0.027,69,0.454,516,3.918,549,2.412,555,3.918,556,4.724]],["title/index.html",[69,0.249,557,2.592,558,2.592]],["body/index.html",[0,1.664,12,0.034,18,0.271,23,1.442,24,2.826,25,1.442,27,1.442,29,0.99,36,1.442,53,1.189,61,0.016,62,0.022,63,0.016,64,2.329,74,3.279,82,1.599,216,1.599,226,1.83,245,1.599,251,1.442,255,1.442,292,2.018,298,2.025,491,3.279,499,2.025,552,2.342,559,2.824,560,2.824,561,2.824,562,3.954,563,2.824,564,2.824,565,2.824,566,2.824,567,2.824,568,2.824,569,2.824,570,2.824,571,2.824,572,2.824,573,2.824,574,5.536,575,2.824,576,2.824,577,2.824,578,5.392,579,2.824,580,2.824,581,3.954,582,2.824,583,2.342,584,2.824,585,2.824,586,4.942,587,2.824,588,2.824,589,2.824,590,3.954,591,3.954,592,2.824,593,2.824,594,2.824,595,2.342,596,2.824,597,2.824,598,2.824,599,2.824,600,2.824,601,2.824,602,2.824,603,2.824,604,2.824,605,2.824,606,2.824,607,2.824,608,2.824,609,2.824,610,2.824,611,2.824,612,2.824,613,2.824,614,3.954,615,4.562,616,3.954,617,3.954,618,4.942,619,4.562,620,2.824,621,2.824,622,2.342,623,2.824,624,2.824,625,2.824,626,2.824]],["title/modules.html",[2,2.151]],["body/modules.html",[1,2.879,2,2.321,11,2.321,12,0.03,13,2.575,61,0.026,62,0.03,63,0.026,595,4.754,627,5.732,628,5.732,629,5.732]],["title/overview.html",[630,3.495]],["body/overview.html",[0,1.521,1,3.67,2,1.845,3,1.845,4,2.288,5,2.288,6,1.845,7,2.288,8,2.288,9,2.998,10,2.998,11,3.083,12,0.034,13,3.339,14,2.956,15,2.288,16,2.288,58,1.845,61,0.02,62,0.026,63,0.02,107,2.64,126,1.387,150,2.998,151,2.998,152,2.998,153,3.339,184,2.288,242,1.845,383,2.64,406,2.998,408,2.998,630,2.998,631,4.668,632,3.614,633,3.614,634,3.614]],["title/miscellaneous/variables.html",[549,1.323,635,3.086]],["body/miscellaneous/variables.html",[12,0.035,54,3.108,61,0.018,62,0.024,63,0.018,69,0.31,83,0.693,93,1.267,111,2.745,118,1.131,130,1.359,131,1.033,154,2.315,169,1.359,173,2.678,192,3.454,193,3.089,235,2.745,246,1.494,249,1.828,252,1.828,253,1.828,255,1.648,334,2.315,508,3.595,511,2.678,512,3.595,514,2.678,515,3.595,518,2.315,519,3.108,549,1.648,551,2.678,583,2.678,622,2.678,635,2.678,636,4.334,637,3.228,638,3.228,639,3.228,640,3.228,641,3.228,642,3.228,643,3.228,644,3.228,645,3.228,646,3.228,647,4.334,648,3.228,649,3.228,650,3.228,651,3.228,652,3.228,653,3.228,654,3.228,655,3.228,656,3.228,657,3.228,658,3.228,659,3.228,660,3.228,661,3.228]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":447,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["0.1.13",{"_index":540,"title":{},"body":{"dependencies.html":{}}}],["0.11.1",{"_index":532,"title":{},"body":{"dependencies.html":{}}}],["0.2.24",{"_index":548,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":531,"title":{},"body":{"dependencies.html":{}}}],["0.4.1",{"_index":534,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":509,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":506,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":505,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":503,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":510,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":520,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":513,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":504,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":358,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["11:02:18",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["11:07:19",{"_index":412,"title":{},"body":{"modules/TasksModule.html":{}}}],["12:26:21",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["12:29:23",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["15th",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["16th",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["17th",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["2",{"_index":632,"title":{},"body":{"overview.html":{}}}],["2020",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["20th",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"controllers/TasksController.html":{}}}],["23505",{"_index":488,"title":{},"body":{"classes/UserRepository.html":{}}}],["2:12:50",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["3",{"_index":631,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":542,"title":{},"body":{"dependencies.html":{}}}],["3.3.1",{"_index":533,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":535,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":529,"title":{},"body":{"dependencies.html":{}}}],["4.1.4",{"_index":547,"title":{},"body":{"dependencies.html":{}}}],["4.5.3",{"_index":528,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":634,"title":{},"body":{"overview.html":{}}}],["5:30:07",{"_index":411,"title":{},"body":{"modules/TasksModule.html":{}}}],["5:37:38",{"_index":377,"title":{},"body":{"controllers/TasksController.html":{}}}],["6.5.4",{"_index":544,"title":{},"body":{"dependencies.html":{}}}],["6:06:59",{"_index":378,"title":{},"body":{"controllers/TasksController.html":{}}}],["6:23:03",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["7.0.0",{"_index":524,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":633,"title":{},"body":{"overview.html":{}}}],["8.0.2",{"_index":537,"title":{},"body":{"dependencies.html":{}}}],["9:10:52",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["__dirname",{"_index":648,"title":{},"body":{"miscellaneous/variables.html":{}}}],["aamer",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["accesstoken",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["add",{"_index":625,"title":{},"body":{"index.html":{}}}],["allowedstatuses",{"_index":344,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["already",{"_index":494,"title":{},"body":{"classes/UserRepository.html":{}}}],["amazing",{"_index":596,"title":{},"body":{"index.html":{}}}],["angular",{"_index":570,"title":{},"body":{"index.html":{}}}],["api",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"index.html":{}}}],["apiproperty",{"_index":222,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["apiproperty()@isnotempty",{"_index":218,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["app",{"_index":576,"title":{},"body":{"index.html":{}}}],["app.module.ts",{"_index":22,"title":{},"body":{"modules/AppModule.html":{}}}],["applications",{"_index":567,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["april",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["async",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["aurora",{"_index":250,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{}}}],["auth",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.controller.ts",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.module.ts",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{}}}],["auth/get",{"_index":387,"title":{},"body":{"controllers/TasksController.html":{}}}],["auth/user.entity",{"_index":293,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["authcontroller",{"_index":65,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcredentialsdto",{"_index":76,"title":{"classes/AuthCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["authguard",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"index.html":{}}}],["authservice",{"_index":107,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["backers",{"_index":597,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":352,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["badrequestexception(`\"${value",{"_index":355,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["baseentity",{"_index":275,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["bcrypt",{"_index":464,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["bcrypt.gensalt",{"_index":483,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":469,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["body",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["body('status",{"_index":402,"title":{},"body":{"controllers/TasksController.html":{}}}],["boolean",{"_index":254,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"classes/TaskStatusValidationPipe.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":629,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":627,"title":{},"body":{"modules.html":{}}}],["building",{"_index":563,"title":{},"body":{"index.html":{}}}],["catch",{"_index":325,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["class",{"_index":60,"title":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/User.html":{},"classes/UserRepository.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":126,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_tasksmodule",{"_index":406,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["cluster_tasksmodule_imports",{"_index":407,"title":{},"body":{"modules/TasksModule.html":{}}}],["cluster_tasksmodule_providers",{"_index":408,"title":{},"body":{"modules/TasksModule.html":{},"overview.html":{}}}],["code",{"_index":489,"title":{},"body":{"classes/UserRepository.html":{}}}],["column",{"_index":278,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["config",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"dependencies.html":{}}}],["config.get('db",{"_index":639,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('jwt",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["config/config.interface",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["config/config.interface.ts",{"_index":243,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"coverage.html":{}}}],["config/typeorm.config",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":480,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('username",{"_index":493,"title":{},"body":{"classes/UserRepository.html":{}}}],["console.log('damn",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["const",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["constructor",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{}}}],["constructor(private",{"_index":390,"title":{},"body":{"controllers/TasksController.html":{}}}],["constructor(taskrepository",{"_index":417,"title":{},"body":{"injectables/TasksService.html":{}}}],["constructor(userrepository",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["controller",{"_index":64,"title":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"coverage.html":{},"index.html":{}}}],["controller('auth",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('tasks",{"_index":388,"title":{},"body":{"controllers/TasksController.html":{}}}],["controllers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["copyright",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["coverage",{"_index":499,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":614,"title":{},"body":{"index.html":{}}}],["created",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["createparamdecorator((data",{"_index":655,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtask",{"_index":299,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["createtask(createtaskdata",{"_index":419,"title":{},"body":{"injectables/TasksService.html":{}}}],["createtask(createtaskdto",{"_index":303,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["createtaskdata",{"_index":421,"title":{},"body":{"injectables/TasksService.html":{}}}],["createtaskdto",{"_index":213,"title":{"classes/CreateTaskDto.html":{}},"body":{"classes/CreateTaskDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["creating",{"_index":399,"title":{},"body":{"controllers/TasksController.html":{}}}],["credentials",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["credentials.dto",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["credentials.dto.ts",{"_index":128,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:18",{"_index":140,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:27",{"_index":138,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["crud",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":149,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["data",{"_index":251,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"controllers/TasksController.html":{},"index.html":{}}}],["database",{"_index":255,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["db",{"_index":244,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{}}}],["dbconfig",{"_index":515,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbconfig.database",{"_index":646,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.host",{"_index":642,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.password",{"_index":645,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.port",{"_index":643,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.synchronize",{"_index":653,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.type",{"_index":641,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.username",{"_index":644,"title":{},"body":{"miscellaneous/variables.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["decorators",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"classes/User.html":{}}}],["default",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"miscellaneous/variables.html":{}}}],["defaultstrategy",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["delete",{"_index":337,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["delete('/:id",{"_index":367,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetask",{"_index":361,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetask(@param('id",{"_index":404,"title":{},"body":{"controllers/TasksController.html":{}}}],["deletetask(id",{"_index":366,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["deletetaskbyid(id",{"_index":448,"title":{},"body":{"injectables/TasksService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":216,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"index.html":{}}}],["development",{"_index":577,"title":{},"body":{"index.html":{}}}],["disable",{"_index":654,"title":{},"body":{"miscellaneous/variables.html":{}}}],["documentation",{"_index":500,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":554,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":620,"title":{},"body":{"index.html":{}}}],["dto/auth",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["dto/creat",{"_index":310,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["dto/get",{"_index":312,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["e",{"_index":326,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["e.code",{"_index":487,"title":{},"body":{"classes/UserRepository.html":{}}}],["e.stack",{"_index":331,"title":{},"body":{"classes/TaskRepository.html":{}}}],["e2e",{"_index":587,"title":{},"body":{"index.html":{}}}],["eager",{"_index":286,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["efficient",{"_index":564,"title":{},"body":{"index.html":{}}}],["entities",{"_index":647,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":290,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["entity.{js,ts",{"_index":649,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityrepository",{"_index":308,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(task",{"_index":315,"title":{},"body":{"classes/TaskRepository.html":{}}}],["entityrepository(user",{"_index":481,"title":{},"body":{"classes/UserRepository.html":{}}}],["enumerations",{"_index":550,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["exists",{"_index":495,"title":{},"body":{"classes/UserRepository.html":{}}}],["expiresin",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{}}}],["export",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["express",{"_index":527,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":266,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["extracting",{"_index":657,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":264,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":270,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["fail",{"_index":492,"title":{},"body":{"classes/UserRepository.html":{}}}],["false",{"_index":287,"title":{},"body":{"classes/Task.html":{}}}],["file",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["filter.dto",{"_index":313,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["filter.dto.ts",{"_index":227,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:18",{"_index":234,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["filter.dto.ts:22",{"_index":231,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["filterdto",{"_index":307,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["filters",{"_index":329,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["folder",{"_index":652,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":436,"title":{},"body":{"injectables/TasksService.html":{}}}],["framework",{"_index":562,"title":{},"body":{"index.html":{}}}],["friday",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["function",{"_index":517,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":555,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":615,"title":{},"body":{"index.html":{}}}],["generate",{"_index":616,"title":{},"body":{"index.html":{}}}],["generated",{"_index":490,"title":{},"body":{"classes/UserRepository.html":{}}}],["get('/:id",{"_index":370,"title":{},"body":{"controllers/TasksController.html":{}}}],["getalltasks",{"_index":429,"title":{},"body":{"injectables/TasksService.html":{}}}],["gettaskbyid",{"_index":362,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettaskbyid(id",{"_index":369,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasks",{"_index":300,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasks(@query(validationpipe",{"_index":391,"title":{},"body":{"controllers/TasksController.html":{}}}],["gettasks(filterdto",{"_index":305,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["gettasksfilterdto",{"_index":224,"title":{"classes/GetTasksFilterDto.html":{}},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["gettaskswithfilters(filterdto",{"_index":431,"title":{},"body":{"injectables/TasksService.html":{}}}],["getting",{"_index":557,"title":{"index.html":{}},"body":{}}],["getuser",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["grow",{"_index":592,"title":{},"body":{"index.html":{}}}],["gusecret94",{"_index":272,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["hash",{"_index":468,"title":{},"body":{"classes/User.html":{}}}],["hashpassword",{"_index":473,"title":{},"body":{"classes/UserRepository.html":{}}}],["hashpassword(password",{"_index":475,"title":{},"body":{"classes/UserRepository.html":{}}}],["heavily",{"_index":568,"title":{},"body":{"index.html":{}}}],["here",{"_index":603,"title":{},"body":{"index.html":{}}}],["host",{"_index":252,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"miscellaneous/variables.html":{}}}],["https://nestjs.com",{"_index":609,"title":{},"body":{"index.html":{}}}],["https://umar.tech",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["iconfig",{"_index":241,"title":{"interfaces/IConfig.html":{}},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"coverage.html":{}}}],["iconfigdb",{"_index":246,"title":{"interfaces/IConfigDB.html":{}},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iconfigjwt",{"_index":169,"title":{"interfaces/IConfigJWT.html":{}},"body":{"modules/AuthModule.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["iconfigserver",{"_index":247,"title":{"interfaces/IConfigServer.html":{}},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"coverage.html":{}}}],["id",{"_index":276,"title":{},"body":{"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{}}}],["identifier",{"_index":501,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":341,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["import",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["imports",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["in_progress",{"_index":553,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["index",{"_index":69,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["injectable",{"_index":183,"title":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["injectables",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{},"overview.html":{}}}],["injectrepository",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TasksService.html":{}}}],["injectrepository(taskrepository",{"_index":427,"title":{},"body":{"injectables/TasksService.html":{}}}],["injectrepository(userrepository",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["inspired",{"_index":569,"title":{},"body":{"index.html":{}}}],["installation",{"_index":573,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":575,"title":{},"body":{"index.html":{}}}],["interface",{"_index":240,"title":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{}},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":242,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"overview.html":{}}}],["internalservererrorexception",{"_index":314,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["invalid",{"_index":356,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isin",{"_index":238,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isin(taskstatuslist",{"_index":239,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isnotempty",{"_index":221,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{}}}],["isoptional",{"_index":237,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isoptional()@isin(taskstatuslist",{"_index":233,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isoptional()@isnotempty",{"_index":230,"title":{},"body":{"classes/GetTasksFilterDto.html":{}}}],["isstatusvalid",{"_index":345,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isstatusvalid(status",{"_index":348,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["isstring",{"_index":141,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isstring()@minlength(4)@maxlength(20",{"_index":139,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isstring()@minlength(8)@maxlength(20)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":133,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["join",{"_index":599,"title":{},"body":{"index.html":{}}}],["js",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"index.html":{}}}],["json.stringify(createtaskdto",{"_index":400,"title":{},"body":{"controllers/TasksController.html":{}}}],["json.stringify(filterdto",{"_index":330,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["json.stringify(payload",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtconfig",{"_index":508,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig.expiresin",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtconfig.secret",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtconfig:iconfigjwt",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":269,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":198,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":153,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":606,"title":{},"body":{"index.html":{}}}],["last",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["license",{"_index":612,"title":{},"body":{"index.html":{}}}],["licensed",{"_index":591,"title":{},"body":{"index.html":{}}}],["logger",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["logger('authservice",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger('task",{"_index":301,"title":{},"body":{"classes/TaskRepository.html":{}}}],["logger('taskscontroller",{"_index":389,"title":{},"body":{"controllers/TasksController.html":{}}}],["management",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"index.html":{}}}],["manytoone",{"_index":291,"title":{},"body":{"classes/Task.html":{}}}],["manytoone(type",{"_index":294,"title":{},"body":{"classes/Task.html":{}}}],["manytoone(undefined",{"_index":284,"title":{},"body":{"classes/Task.html":{}}}],["matches",{"_index":144,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matching",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":143,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["maxlength(20",{"_index":147,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["message",{"_index":136,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["metadata",{"_index":539,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["minlength",{"_index":142,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(4",{"_index":146,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(8",{"_index":148,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["miscellaneous",{"_index":549,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":590,"title":{},"body":{"index.html":{}}}],["mode",{"_index":581,"title":{},"body":{"index.html":{}}}],["modified",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"index.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["monday",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{},"controllers/TasksController.html":{}}}],["more",{"_index":602,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":607,"title":{},"body":{"index.html":{}}}],["name",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["nest",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"index.html":{}}}],["nestframework",{"_index":611,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":559,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":525,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"controllers/TasksController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":526,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":223,"title":{},"body":{"classes/CreateTaskDto.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"dependencies.html":{},"index.html":{}}}],["new",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["node.js",{"_index":561,"title":{},"body":{"index.html":{}}}],["notes",{"_index":613,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":426,"title":{},"body":{"injectables/TasksService.html":{}}}],["notfoundexception(`task",{"_index":438,"title":{},"body":{"injectables/TasksService.html":{}}}],["npm",{"_index":574,"title":{},"body":{"index.html":{}}}],["null",{"_index":498,"title":{},"body":{"classes/UserRepository.html":{}}}],["number",{"_index":248,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"classes/Task.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{}}}],["object",{"_index":622,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["onetomany",{"_index":463,"title":{},"body":{"classes/User.html":{}}}],["onetomany(type",{"_index":467,"title":{},"body":{"classes/User.html":{}}}],["onetomany(undefined",{"_index":456,"title":{},"body":{"classes/User.html":{}}}],["open",{"_index":552,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["optional",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GetTasksFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["out",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["overview",{"_index":630,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":626,"title":{},"body":{"index.html":{}}}],["package",{"_index":523,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":379,"title":{},"body":{"controllers/TasksController.html":{}}}],["param('id",{"_index":395,"title":{},"body":{"controllers/TasksController.html":{}}}],["parameters",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["parseintpipe",{"_index":382,"title":{},"body":{"controllers/TasksController.html":{}}}],["passport",{"_index":265,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":263,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":267,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":130,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":380,"title":{},"body":{"controllers/TasksController.html":{}}}],["patch('/:id/status",{"_index":374,"title":{},"body":{"controllers/TasksController.html":{}}}],["payload",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":257,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["pg",{"_index":536,"title":{},"body":{"dependencies.html":{}}}],["pgadmin",{"_index":623,"title":{},"body":{"index.html":{}}}],["pipes/task",{"_index":385,"title":{},"body":{"controllers/TasksController.html":{}}}],["pipetransform",{"_index":342,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["please",{"_index":600,"title":{},"body":{"index.html":{}}}],["pm",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["port",{"_index":249,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"miscellaneous/variables.html":{}}}],["post",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["post('/signin",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/test",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/test')@useguards(undefined",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@usepipes(validationpipe",{"_index":364,"title":{},"body":{"controllers/TasksController.html":{}}}],["postgres",{"_index":491,"title":{},"body":{"classes/UserRepository.html":{},"index.html":{}}}],["prefix",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["previous",{"_index":651,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primarygeneratedcolumn",{"_index":280,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["private",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{}}}],["production",{"_index":583,"title":{},"body":{"index.html":{},"miscellaneous/variables.html":{}}}],["progressive",{"_index":560,"title":{},"body":{"index.html":{}}}],["project",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"index.html":{}}}],["promise",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["properties",{"_index":129,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"classes/User.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["query",{"_index":316,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{}}}],["query.andwhere('(task.title",{"_index":321,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.andwhere('task.status",{"_index":320,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.getmany",{"_index":324,"title":{},"body":{"classes/TaskRepository.html":{}}}],["query.where('task.userid",{"_index":318,"title":{},"body":{"classes/TaskRepository.html":{}}}],["read",{"_index":601,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":343,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["reflect",{"_index":538,"title":{},"body":{"dependencies.html":{}}}],["repository",{"_index":298,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["req",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["req.switchtohttp().getrequest().user",{"_index":659,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req:executioncontext",{"_index":656,"title":{},"body":{"miscellaneous/variables.html":{}}}],["request",{"_index":658,"title":{},"body":{"miscellaneous/variables.html":{}}}],["reset",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}],["result",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["result.affected",{"_index":446,"title":{},"body":{"injectables/TasksService.html":{}}}],["results",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieving",{"_index":393,"title":{},"body":{"controllers/TasksController.html":{}}}],["return",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["rimraf",{"_index":541,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":578,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":543,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":451,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["scalable",{"_index":565,"title":{},"body":{"index.html":{}}}],["search",{"_index":228,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["secret",{"_index":177,"title":{},"body":{"modules/AuthModule.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{}}}],["secretorkey",{"_index":271,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":245,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"index.html":{}}}],["service",{"_index":619,"title":{},"body":{"index.html":{}}}],["side",{"_index":566,"title":{},"body":{"index.html":{}}}],["signin",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(@body(validationpipe",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(authcredentialsdto",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signoptions",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["signup(@body(validationpipe",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(authcredentialsdto",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["source",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"index.html":{}}}],["spec",{"_index":618,"title":{},"body":{"index.html":{}}}],["sponsors",{"_index":594,"title":{},"body":{"index.html":{}}}],["src/.../auth.module.ts",{"_index":638,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":637,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":556,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../task",{"_index":551,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/.../typeorm.config.ts",{"_index":636,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":20,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:27",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:32",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:38",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service.ts",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:22",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:29",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:33",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth",{"_index":127,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/get",{"_index":511,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/jwt",{"_index":256,"title":{},"body":{"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/user.entity.ts",{"_index":450,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/auth/user.entity.ts:20",{"_index":453,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:23",{"_index":459,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:26",{"_index":454,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:29",{"_index":455,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:32",{"_index":458,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.entity.ts:34",{"_index":461,"title":{},"body":{"classes/User.html":{}}}],["src/auth/user.repository.ts",{"_index":472,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{}}}],["src/auth/user.repository.ts:20",{"_index":477,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/auth/user.repository.ts:40",{"_index":479,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/auth/user.repository.ts:51",{"_index":476,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/config/typeorm.config.ts",{"_index":514,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":516,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/tasks/dto/creat",{"_index":214,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["src/tasks/dto/get",{"_index":225,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"coverage.html":{}}}],["src/tasks/pipes/task",{"_index":339,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["src/tasks/task",{"_index":518,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/tasks/task.entity.ts",{"_index":274,"title":{},"body":{"classes/Task.html":{},"coverage.html":{}}}],["src/tasks/task.entity.ts:19",{"_index":281,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:22",{"_index":283,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:25",{"_index":279,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:28",{"_index":282,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:31",{"_index":288,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.entity.ts:34",{"_index":289,"title":{},"body":{"classes/Task.html":{}}}],["src/tasks/task.repository.ts",{"_index":297,"title":{},"body":{"classes/TaskRepository.html":{},"coverage.html":{}}}],["src/tasks/task.repository.ts:23",{"_index":302,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/tasks/task.repository.ts:25",{"_index":306,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/tasks/task.repository.ts:52",{"_index":304,"title":{},"body":{"classes/TaskRepository.html":{}}}],["src/tasks/tasks.controller.ts",{"_index":360,"title":{},"body":{"controllers/TasksController.html":{},"coverage.html":{}}}],["src/tasks/tasks.controller.ts:30",{"_index":372,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:37",{"_index":371,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:46",{"_index":365,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:55",{"_index":375,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.controller.ts:64",{"_index":368,"title":{},"body":{"controllers/TasksController.html":{}}}],["src/tasks/tasks.module.ts",{"_index":409,"title":{},"body":{"modules/TasksModule.html":{}}}],["src/tasks/tasks.service.ts",{"_index":416,"title":{},"body":{"injectables/TasksService.html":{},"coverage.html":{}}}],["src/tasks/tasks.service.ts:107",{"_index":422,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:22",{"_index":418,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:31",{"_index":424,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:55",{"_index":423,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:75",{"_index":420,"title":{},"body":{"injectables/TasksService.html":{}}}],["src/tasks/tasks.service.ts:94",{"_index":425,"title":{},"body":{"injectables/TasksService.html":{}}}],["start",{"_index":579,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":582,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":584,"title":{},"body":{"index.html":{}}}],["started",{"_index":558,"title":{"index.html":{}},"body":{}}],["starter",{"_index":572,"title":{},"body":{"index.html":{}}}],["statements",{"_index":502,"title":{},"body":{"coverage.html":{}}}],["status",{"_index":229,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["status.enum",{"_index":236,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["status.enum.ts",{"_index":519,"title":{},"body":{"coverage.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["stay",{"_index":604,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["strategy.ts",{"_index":258,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["strategy.ts:20",{"_index":260,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["strategy.ts:31",{"_index":262,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":132,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"classes/Task.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["super",{"_index":268,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":595,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":628,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":545,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":253,"title":{},"body":{"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"miscellaneous/variables.html":{}}}],["table",{"_index":522,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":521,"title":{},"body":{"coverage.html":{}}}],["task",{"_index":26,"title":{"classes/Task.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"coverage.html":{}}}],["task.description",{"_index":322,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.description.includes(search",{"_index":435,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.dto",{"_index":311,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.dto.ts",{"_index":215,"title":{},"body":{"classes/CreateTaskDto.html":{},"coverage.html":{}}}],["task.dto.ts:17",{"_index":220,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.dto.ts:21",{"_index":219,"title":{},"body":{"classes/CreateTaskDto.html":{}}}],["task.entity",{"_index":309,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["task.id",{"_index":440,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.repository",{"_index":414,"title":{},"body":{"modules/TasksModule.html":{},"injectables/TasksService.html":{}}}],["task.save",{"_index":336,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["task.status",{"_index":333,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["task.title",{"_index":332,"title":{},"body":{"classes/TaskRepository.html":{}}}],["task.title.includes(search",{"_index":434,"title":{},"body":{"injectables/TasksService.html":{}}}],["task.user",{"_index":335,"title":{},"body":{"classes/TaskRepository.html":{},"classes/User.html":{}}}],["taskrepository",{"_index":296,"title":{"classes/TaskRepository.html":{}},"body":{"classes/TaskRepository.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{}}}],["tasks",{"_index":226,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"coverage.html":{},"index.html":{}}}],["tasks.controller",{"_index":413,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.controller.ts",{"_index":376,"title":{},"body":{"controllers/TasksController.html":{}}}],["tasks.filter(task",{"_index":433,"title":{},"body":{"injectables/TasksService.html":{}}}],["tasks.module.ts",{"_index":410,"title":{},"body":{"modules/TasksModule.html":{}}}],["tasks.service",{"_index":384,"title":{},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["tasks/task.entity",{"_index":465,"title":{},"body":{"classes/User.html":{}}}],["tasks/tasks.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["taskscontroller",{"_index":359,"title":{"controllers/TasksController.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"coverage.html":{}}}],["tasksmodule",{"_index":13,"title":{"modules/TasksModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TasksModule.html":{},"modules.html":{},"overview.html":{}}}],["tasksservice",{"_index":383,"title":{"injectables/TasksService.html":{}},"body":{"controllers/TasksController.html":{},"modules/TasksModule.html":{},"injectables/TasksService.html":{},"coverage.html":{},"overview.html":{}}}],["taskstatus",{"_index":232,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"miscellaneous/enumerations.html":{}}}],["taskstatus.done",{"_index":661,"title":{},"body":{"miscellaneous/variables.html":{}}}],["taskstatus.in_progress",{"_index":660,"title":{},"body":{"miscellaneous/variables.html":{}}}],["taskstatus.open",{"_index":334,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TasksService.html":{},"miscellaneous/variables.html":{}}}],["taskstatuslist",{"_index":235,"title":{},"body":{"classes/GetTasksFilterDto.html":{},"classes/TaskStatusValidationPipe.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["taskstatusvalidationpipe",{"_index":338,"title":{"classes/TaskStatusValidationPipe.html":{}},"body":{"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"coverage.html":{}}}],["test",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"index.html":{}}}],["test(@getuser",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["test(user",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["test:covsupport",{"_index":589,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":588,"title":{},"body":{"index.html":{}}}],["tests",{"_index":586,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":593,"title":{},"body":{"index.html":{}}}],["this.allowedstatuses.indexof(status",{"_index":357,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["this.authservice.signin(authcredentialsdto",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(authcredentialsdto",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.createquerybuilder('task",{"_index":317,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.findone({username",{"_index":496,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.getalltasks",{"_index":432,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.gettaskbyid(id",{"_index":444,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.hashpassword(password",{"_index":485,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.isstatusvalid(value",{"_index":353,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["this.jwtservice.sign(payload",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug(`generated",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(`failed",{"_index":327,"title":{},"body":{"classes/TaskRepository.html":{}}}],["this.logger.verbose(`${user.username",{"_index":398,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.logger.verbose(`user",{"_index":392,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.password",{"_index":471,"title":{},"body":{"classes/User.html":{}}}],["this.salt",{"_index":470,"title":{},"body":{"classes/User.html":{}}}],["this.taskrepository.createtask(createtaskdata",{"_index":441,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.delete({id",{"_index":445,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.findone(id",{"_index":437,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.taskrepository.gettasks(filterdto",{"_index":428,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasks",{"_index":430,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasks.filter(task",{"_index":449,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasks.find(task",{"_index":439,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasks.push(task",{"_index":443,"title":{},"body":{"injectables/TasksService.html":{}}}],["this.tasksservice.createtask(createtaskdto",{"_index":401,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.deletetask(id",{"_index":405,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettaskbyid(id",{"_index":396,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.gettasks(filterdto",{"_index":394,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.tasksservice.updatetaskstatus(id",{"_index":403,"title":{},"body":{"controllers/TasksController.html":{}}}],["this.userrepository.findone",{"_index":273,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userrepository.signup(authcredentialsdto",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.validateuserpassword(authcredentialsdto",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"injectables/TasksService.html":{},"classes/UserRepository.html":{}}}],["thursday",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["title",{"_index":217,"title":{},"body":{"classes/CreateTaskDto.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["token",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{}}}],["touch",{"_index":605,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":621,"title":{},"body":{"index.html":{}}}],["transform",{"_index":346,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["transform(value",{"_index":350,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["transformer",{"_index":530,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":457,"title":{},"body":{"classes/User.html":{}}}],["try",{"_index":323,"title":{},"body":{"classes/TaskRepository.html":{},"classes/UserRepository.html":{}}}],["twitter",{"_index":610,"title":{},"body":{"index.html":{}}}],["type",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeorm",{"_index":292,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{},"index.html":{}}}],["typeormconfig",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([taskrepository",{"_index":415,"title":{},"body":{"modules/TasksModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":640,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":571,"title":{},"body":{"index.html":{}}}],["ui",{"_index":546,"title":{},"body":{"dependencies.html":{}}}],["umar",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["umaraamer@gmail.com",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["unauthorizedexception",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('invalid",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["undefined",{"_index":285,"title":{},"body":{"classes/Task.html":{},"classes/User.html":{}}}],["unique",{"_index":462,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["unique(['username",{"_index":466,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":585,"title":{},"body":{"index.html":{}}}],["updatetaskstatus",{"_index":363,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["updatetaskstatus(id",{"_index":373,"title":{},"body":{"controllers/TasksController.html":{},"injectables/TasksService.html":{}}}],["use",{"_index":650,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useguards",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["useguards(authguard",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["usepipes",{"_index":381,"title":{},"body":{"controllers/TasksController.html":{}}}],["usepipes(validationpipe",{"_index":397,"title":{},"body":{"controllers/TasksController.html":{}}}],["user",{"_index":93,"title":{"classes/User.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/Task.html":{},"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"injectables/TasksService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.decorator",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["user.decorator.ts",{"_index":512,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.entity",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["user.id",{"_index":319,"title":{},"body":{"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["user.password",{"_index":484,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.repository",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["user.salt",{"_index":482,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.save",{"_index":486,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.tasks",{"_index":295,"title":{},"body":{"classes/Task.html":{}}}],["user.username",{"_index":328,"title":{},"body":{"classes/TaskRepository.html":{},"controllers/TasksController.html":{},"classes/UserRepository.html":{}}}],["user.validatepassword(password",{"_index":497,"title":{},"body":{"classes/UserRepository.html":{}}}],["userid",{"_index":277,"title":{},"body":{"classes/Task.html":{},"classes/TaskRepository.html":{},"injectables/TasksService.html":{}}}],["username",{"_index":131,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"interfaces/IConfig.html":{},"interfaces/IConfigDB.html":{},"interfaces/IConfigJWT.html":{},"interfaces/IConfigServer.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["userrepository",{"_index":161,"title":{"classes/UserRepository.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"classes/UserRepository.html":{},"coverage.html":{}}}],["uuid",{"_index":442,"title":{},"body":{"injectables/TasksService.html":{}}}],["validate",{"_index":259,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":261,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatepassword",{"_index":452,"title":{},"body":{"classes/User.html":{}}}],["validatepassword(password",{"_index":460,"title":{},"body":{"classes/User.html":{}}}],["validateuserpassword",{"_index":474,"title":{},"body":{"classes/UserRepository.html":{}}}],["validateuserpassword(authcredentialsdto",{"_index":478,"title":{},"body":{"classes/UserRepository.html":{}}}],["validation.pipe",{"_index":386,"title":{},"body":{"controllers/TasksController.html":{}}}],["validation.pipe.ts",{"_index":340,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{},"coverage.html":{}}}],["validation.pipe.ts:17",{"_index":347,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validation.pipe.ts:20",{"_index":351,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validation.pipe.ts:29",{"_index":349,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["validationpipe",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TasksController.html":{}}}],["validator",{"_index":145,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateTaskDto.html":{},"classes/GetTasksFilterDto.html":{},"dependencies.html":{}}}],["value",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"classes/TaskRepository.html":{},"classes/TaskStatusValidationPipe.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.touppercase",{"_index":354,"title":{},"body":{"classes/TaskStatusValidationPipe.html":{}}}],["variable",{"_index":507,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":635,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["void",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/TasksService.html":{}}}],["watch",{"_index":580,"title":{},"body":{"index.html":{}}}],["weak",{"_index":137,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["website",{"_index":608,"title":{},"body":{"index.html":{}}}],["wednesday",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["whilegeek",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TasksController.html":{},"modules/TasksModule.html":{}}}],["without",{"_index":617,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":624,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":598,"title":{},"body":{"index.html":{}}}],["z",{"_index":135,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["z])(?=.*[a",{"_index":134,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["zoom",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TasksModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTasksModule\n\nTasksModule\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TasksModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*\n * File: app.module.ts\n * Project: Nest JS Task Management CRUD API\n * File Created: Wednesday, 15th April 2020 2:12:50 am\n * Author: Umar Aamer (umaraamer@gmail.com)\n * -----\n * Last Modified: Thursday, 16th April 2020 6:23:03 pm\n * -----\n * Copyright 2020 - 2020 WhileGeek, https://umar.tech\n */\n\nimport { Module } from '@nestjs/common';\nimport { TasksModule } from './tasks/tasks.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { typeOrmConfig } from './config/typeorm.config';\nimport { AuthModule } from './auth/auth.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(typeOrmConfig),\n    TasksModule,\n    AuthModule\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                test\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            test\n                        \n                        \n                    \n                \n            \n            \n                \ntest(user)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/test')@UseGuards(undefined)\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /*\n * File: auth.controller.ts\n * Project: Nest JS Task Management CRUD API\n * File Created: Friday, 17th April 2020 12:29:23 am\n * Author: Umar Aamer (umaraamer@gmail.com)\n * -----\n * Last Modified: Friday, 17th April 2020 11:02:18 pm\n * -----\n * Copyright 2020 - 2020 WhileGeek, https://umar.tech\n */\n\nimport { Controller, Post, Body, ValidationPipe, UseGuards, Req } from '@nestjs/common';\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { AuthService } from './auth.service';\nimport { AuthGuard } from '@nestjs/passport';\nimport { GetUser } from './get-user.decorator';\nimport { User } from './user.entity';\n\n@Controller('auth')\nexport class AuthController {\n\n  constructor(\n    private authService: AuthService\n  ){}\n\n  @Post('/signup')\n  async signUp(@Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.authService.signUp(authCredentialsDto);\n  }\n\n  @Post('/signin')\n  async signIn(@Body(ValidationPipe) authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.authService.signIn(authCredentialsDto);\n  }\n\n  @Post('/test')\n  @UseGuards(AuthGuard())\n  test(@GetUser() user) {\n    console.log('damn: ', user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthCredentialsDto.html":{"url":"classes/AuthCredentialsDto.html","title":"class - AuthCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-credentials.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(8)@MaxLength(20)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/auth-credentials.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsString()@MinLength(4)@MaxLength(20)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/auth-credentials.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, MinLength, MaxLength, Matches } from \"class-validator\";\n\nexport class AuthCredentialsDto {\n  @IsString()\n  @MinLength(4)\n  @MaxLength(20)  \n  username: string;\n\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(\n    /((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/,\n    {message: 'Password too weak'}\n  )\n  password: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\n\n\nAuthModule\n\nAuthModule\n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            JwtStrategy\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*\n * File: auth.module.ts\n * Project: Nest JS Task Management CRUD API\n * File Created: Friday, 17th April 2020 12:26:21 am\n * Author: Umar Aamer (umaraamer@gmail.com)\n * -----\n * Last Modified: Monday, 20th April 2020 9:10:52 pm\n * -----\n * Copyright 2020 - 2020 WhileGeek, https://umar.tech\n */\n\nimport { Module } from '@nestjs/common';\nimport { AuthController } from './auth.controller';\nimport { AuthService } from './auth.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserRepository } from './user.repository';\nimport { JwtModule } from '@nestjs/jwt'\nimport { PassportModule } from '@nestjs/passport'\nimport { JwtStrategy } from './jwt-strategy';\nimport * as config from 'config'\nimport { IConfigJWT } from '../../config/config.interface';\n\nconst jwtConfig:IConfigJWT = config.get('jwt')\n\n@Module({\n  imports: [\n    PassportModule.register({ defaultStrategy: 'jwt'}),\n    JwtModule.register({\n      secret: jwtConfig.secret,\n      signOptions: {\n        expiresIn: jwtConfig.expiresIn\n      }\n    }),\n    TypeOrmModule.forFeature([UserRepository])\n  ],\n  controllers: [AuthController],\n  providers: [AuthService, JwtStrategy],\n  exports: [\n    JwtStrategy,\n    PassportModule\n  ]\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('AuthService')\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:22\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, UnauthorizedException, Logger } from '@nestjs/common';\nimport { UserRepository } from './user.repository';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto';\nimport { User } from './user.entity';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtPayload } from './jwt-payload.interface';\n\n@Injectable()\nexport class AuthService {\n  private logger = new Logger('AuthService')\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository,\n    private jwtService: JwtService,\n  ) {}\n\n  async signUp(authCredentialsDto: AuthCredentialsDto): Promise {\n    return await this.userRepository.signUp(authCredentialsDto)\n  }\n\n  async signIn(authCredentialsDto: AuthCredentialsDto): Promise {\n    const username = await this.userRepository.validateUserPassword(authCredentialsDto);\n\n    if (!username) {\n      throw new UnauthorizedException('Invalid credentials')\n    }\n\n    const payload: JwtPayload = {username};\n    const accessToken = await this.jwtService.sign(payload)\n    this.logger.debug(`Generated token with payload ${JSON.stringify(payload)}`)\n\n    return { accessToken };\n  }\n\n\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTaskDto.html":{"url":"classes/CreateTaskDto.html","title":"class - CreateTaskDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTaskDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/creat-task.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/creat-task.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiProperty()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/creat-task.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {IsNotEmpty} from 'class-validator'\nimport { ApiProperty } from '@nestjs/swagger';\nexport class CreateTaskDto {\n  @ApiProperty()\n  @IsNotEmpty()\n  title: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  description: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTasksFilterDto.html":{"url":"classes/GetTasksFilterDto.html","title":"class - GetTasksFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTasksFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/dto/get-tasks-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                search\n                            \n                            \n                                    Optional\n                                status\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/get-tasks-filter.dto.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @IsOptional()@IsIn(TaskStatusList)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/dto/get-tasks-filter.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { TaskStatus, TaskStatusList } from \"../task-status.enum\";\nimport { IsOptional, IsIn, IsNotEmpty } from \"class-validator\";\n\nexport class GetTasksFilterDto {\n  @IsOptional()\n  @IsIn(TaskStatusList)\n  status?: TaskStatus;\n   \n  @IsOptional()\n  @IsNotEmpty()\n  search?: string;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IConfig.html":{"url":"interfaces/IConfig.html","title":"interface - IConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            config/config.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        db\n                                \n                                \n                                        jwt\n                                \n                                \n                                        server\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        db\n                                    \n                                \n                                \n                                    \n                                        db:         IConfigDB\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IConfigDB\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                    \n                                \n                                \n                                    \n                                        jwt:         IConfigJWT\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IConfigJWT\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        server\n                                    \n                                \n                                \n                                    \n                                        server:         IConfigServer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         IConfigServer\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IConfig {\n  server: IConfigServer,\n  db: IConfigDB,\n  jwt: IConfigJWT\n}\n\nexport interface IConfigJWT {\n  expiresIn: number;\n  secret: string;\n}\n\nexport interface IConfigServer {\n  port: number;\n}\n\nexport interface IConfigDB {\n  type: \"aurora-data-api\";\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  synchronize: boolean;\n  database: string;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IConfigDB.html":{"url":"interfaces/IConfigDB.html","title":"interface - IConfigDB","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IConfigDB\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            config/config.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        database\n                                \n                                \n                                        host\n                                \n                                \n                                        password\n                                \n                                \n                                        port\n                                \n                                \n                                        synchronize\n                                \n                                \n                                        type\n                                \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        database\n                                    \n                                \n                                \n                                    \n                                        database:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        host\n                                    \n                                \n                                \n                                    \n                                        host:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        synchronize\n                                    \n                                \n                                \n                                    \n                                        synchronize:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                    \n                                \n                                \n                                    \n                                        type:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IConfig {\n  server: IConfigServer,\n  db: IConfigDB,\n  jwt: IConfigJWT\n}\n\nexport interface IConfigJWT {\n  expiresIn: number;\n  secret: string;\n}\n\nexport interface IConfigServer {\n  port: number;\n}\n\nexport interface IConfigDB {\n  type: \"aurora-data-api\";\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  synchronize: boolean;\n  database: string;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IConfigJWT.html":{"url":"interfaces/IConfigJWT.html","title":"interface - IConfigJWT","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IConfigJWT\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            config/config.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        expiresIn\n                                \n                                \n                                        secret\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        expiresIn\n                                    \n                                \n                                \n                                    \n                                        expiresIn:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        secret\n                                    \n                                \n                                \n                                    \n                                        secret:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IConfig {\n  server: IConfigServer,\n  db: IConfigDB,\n  jwt: IConfigJWT\n}\n\nexport interface IConfigJWT {\n  expiresIn: number;\n  secret: string;\n}\n\nexport interface IConfigServer {\n  port: number;\n}\n\nexport interface IConfigDB {\n  type: \"aurora-data-api\";\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  synchronize: boolean;\n  database: string;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IConfigServer.html":{"url":"interfaces/IConfigServer.html","title":"interface - IConfigServer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  IConfigServer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            config/config.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        port\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        port\n                                    \n                                \n                                \n                                    \n                                        port:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface IConfig {\n  server: IConfigServer,\n  db: IConfigDB,\n  jwt: IConfigJWT\n}\n\nexport interface IConfigJWT {\n  expiresIn: number;\n  secret: string;\n}\n\nexport interface IConfigServer {\n  port: number;\n}\n\nexport interface IConfigDB {\n  type: \"aurora-data-api\";\n  host: string;\n  port: number;\n  username: string;\n  password: string;\n  synchronize: boolean;\n  database: string;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        username\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  username: string;\n}\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt-strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt-strategy.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt-strategy.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport'\nimport { Strategy, ExtractJwt } from 'passport-jwt'\nimport { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { JwtPayload } from './jwt-payload.interface'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { UserRepository } from './user.repository'\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    @InjectRepository(UserRepository)\n    private userRepository: UserRepository\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: 'guSecret94'\n    })\n  }\n\n  async validate(payload: JwtPayload) {\n    const {username} = payload;\n    const user = await this.userRepository.findOne({ username })\n\n    if (!user) {\n      throw new UnauthorizedException()\n    }\n\n    return user;\n  } \n}\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Task.html":{"url":"classes/Task.html","title":"class - Task","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Task\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                status\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            status\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         TaskStatus\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:28\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ManyToOne(undefined, undefined, {eager: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.entity.ts:34\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity, Entity, PrimaryGeneratedColumn, Column, ManyToOne } from \"typeorm\";\nimport { TaskStatus } from \"./task-status.enum\";\nimport { User } from \"../auth/user.entity\";\n\n@Entity()\nexport class Task extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  title: string;\n  \n  @Column()\n  description: string;\n  \n  @Column()\n  status: TaskStatus;\n\n  @ManyToOne(type => User, user => user.tasks, {eager: false})\n  user: User;\n\n  @Column()\n  userId: number;\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskRepository.html":{"url":"classes/TaskRepository.html","title":"class - TaskRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/task.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTask\n                            \n                            \n                                    Async\n                                getTasks\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('Task Repository')\n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/task.repository.ts:23\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTask(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/task.repository.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTasks(filterDto: GetTasksFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/task.repository.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Repository, EntityRepository } from \"typeorm\";\nimport { Task } from \"./task.entity\";\nimport { CreateTaskDto } from \"./dto/creat-task.dto\";\nimport { TaskStatus } from \"./task-status.enum\";\nimport { GetTasksFilterDto } from \"./dto/get-tasks-filter.dto\";\nimport { User } from \"../auth/user.entity\";\nimport { Logger, InternalServerErrorException } from \"@nestjs/common\";\n\n@EntityRepository(Task)\nexport class TaskRepository extends Repository{\n\n  private logger = new Logger('Task Repository')\n\n  async getTasks(filterDto: GetTasksFilterDto, user: User): Promise {\n    const { search, status } = filterDto\n\n    const query = this.createQueryBuilder('task')\n\n    query.where('task.userId = :userId', { userId: user.id })\n\n\n    if (status) {\n      query.andWhere('task.status = :status', { status })\n    }\n\n    if (search) {\n      query.andWhere('(task.title LIKE :search OR task.description LIKE :search)', { search: `%${search}%` })\n    }\n\n    try {\n      const tasks = await query.getMany()\n      return tasks;\n    } catch (e) {\n      this.logger.error(`Failed to get tasks for user ${user.username}. Filters: ${JSON.stringify(filterDto)}`, e.stack)\n      throw new InternalServerErrorException()\n    }\n\n\n  }\n\n  async createTask(createTaskDto: CreateTaskDto, user: User): Promise {\n    const { title, description } = createTaskDto;\n\n    const task = new Task();\n    task.title = title;\n    task.description = description;\n    task.status = TaskStatus.OPEN;\n    task.user = user;\n    await task.save()\n\n    delete task.user;\n\n    return task;\n  }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TaskStatusValidationPipe.html":{"url":"classes/TaskStatusValidationPipe.html","title":"class - TaskStatusValidationPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TaskStatusValidationPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/pipes/task-status-validation.pipe.ts\n        \n\n\n\n            \n                Implements\n            \n            \n                            PipeTransform\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                allowedStatuses\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                isStatusValid\n                            \n                            \n                                transform\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Readonly\n                            allowedStatuses\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : TaskStatusList\n                        \n                    \n                        \n                            \n                                    Defined in src/tasks/pipes/task-status-validation.pipe.ts:17\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            isStatusValid\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    isStatusValid(status: any)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/pipes/task-status-validation.pipe.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    status\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            transform\n                        \n                        \n                    \n                \n            \n            \n                \ntransform(value: string)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/pipes/task-status-validation.pipe.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { PipeTransform, BadRequestException } from \"@nestjs/common\";\nimport { TaskStatusList } from \"../task-status.enum\";\n\nexport class TaskStatusValidationPipe implements PipeTransform {\n\n  readonly allowedStatuses = TaskStatusList;\n\n\n  transform(value: string) {\n    if (!this.isStatusValid(value)) {\n      value = value.toUpperCase()\n      throw new BadRequestException(`\"${value}\" is an invalid status`)\n    }\n    \n    return value;\n  }\n\n  private isStatusValid(status: any) {\n    return this.allowedStatuses.indexOf(status) !== -1;\n  }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TasksController.html":{"url":"controllers/TasksController.html","title":"controller - TasksController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TasksController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                tasks\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                deleteTask\n                            \n                            \n                                getTaskById\n                            \n                            \n                                getTasks\n                            \n                            \n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskDto: CreateTaskDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(ValidationPipe)\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskDto\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTask(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \ngetTaskById(id: number, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(filterDto: GetTasksFilterDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTaskStatus(id: number, status: TaskStatus, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id/status')\n                \n            \n\n            \n                \n                    Defined in src/tasks/tasks.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                TaskStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        /*\n * File: tasks.controller.ts\n * Project: Nest JS Task Management CRUD API\n * File Created: Wednesday, 15th April 2020 5:37:38 pm\n * Author: Umar Aamer (umaraamer@gmail.com)\n * -----\n * Last Modified: Monday, 20th April 2020 6:06:59 pm\n * -----\n * Copyright 2020 - 2020 WhileGeek, https://umar.tech\n */\n\nimport { Controller, Get, Post, Body, Param, Delete, Patch, Query, UsePipes, ValidationPipe, ParseIntPipe, UseGuards, Logger } from '@nestjs/common';\nimport { TasksService } from './tasks.service';\nimport { TaskStatus } from './task-status.enum';\nimport { CreateTaskDto } from './dto/creat-task.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { TaskStatusValidationPipe } from './pipes/task-status-validation.pipe';\nimport { Task } from './task.entity';\nimport { AuthGuard } from '@nestjs/passport';\nimport { User } from '../auth/user.entity';\nimport { GetUser } from '../auth/get-user.decorator';\n\n@Controller('tasks')\n@UseGuards(AuthGuard())\nexport class TasksController {\n  private logger = new Logger('TasksController')\n  constructor(private tasksService: TasksService) { }\n\n  @Get()\n  getTasks(@Query(ValidationPipe) filterDto: GetTasksFilterDto, @GetUser() user: User): Promise {\n    this.logger.verbose(`User ${user.username} retrieving all tasks. Filters: ${JSON.stringify(filterDto)}`)\n    return this.tasksService.getTasks(filterDto, user);\n  }\n\n\n  @Get('/:id')\n  getTaskById(\n    @Param('id', ParseIntPipe) id: number,\n    @GetUser() user: User\n    ): Promise {\n    return this.tasksService.getTaskById(id, user)\n  }\n\n  @Post()\n  @UsePipes(ValidationPipe)\n  createTask(\n    @Body() createTaskDto: CreateTaskDto,\n    @GetUser() user: User\n  ): Promise {\n    this.logger.verbose(`${user.username} creating a new task. Data: ${JSON.stringify(createTaskDto)}`)\n    return this.tasksService.createTask(createTaskDto, user);\n  }\n\n  @Patch('/:id/status')\n  updateTaskStatus(\n    @Param('id', ParseIntPipe) id: number,\n    @Body('status', TaskStatusValidationPipe) status: TaskStatus,\n    @GetUser() user: User\n  ): Promise {\n    return this.tasksService.updateTaskStatus(id, status, user)\n  }\n\n  @Delete('/:id')\n  deleteTask(@Param('id', ParseIntPipe,) id: number, @GetUser() user: User): Promise {\n    return this.tasksService.deleteTask(id, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TasksModule.html":{"url":"modules/TasksModule.html","title":"module - TasksModule","body":"\n                   \n\n\n\n\n    Modules\n    TasksModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_imports\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/tasks/tasks.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TasksService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TasksController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        /*\n * File: tasks.module.ts\n * Project: Nest JS Task Management CRUD API\n * File Created: Wednesday, 15th April 2020 5:30:07 pm\n * Author: Umar Aamer (umaraamer@gmail.com)\n * -----\n * Last Modified: Friday, 17th April 2020 11:07:19 pm\n * -----\n * Copyright 2020 - 2020 WhileGeek, https://umar.tech\n */\n\nimport { Module } from '@nestjs/common';\nimport { TasksController } from './tasks.controller';\nimport { TasksService } from './tasks.service';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { TaskRepository } from './task.repository';\nimport { AuthModule } from '../auth/auth.module';\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([TaskRepository]),\n    AuthModule\n  ],\n  controllers: [TasksController],\n  providers: [TasksService]\n})\nexport class TasksModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TasksService.html":{"url":"injectables/TasksService.html","title":"injectable - TasksService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TasksService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/tasks/tasks.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTask\n                            \n                            \n                                    Async\n                                deleteTask\n                            \n                            \n                                    Async\n                                getTaskById\n                            \n                            \n                                getTasks\n                            \n                            \n                                    Async\n                                updateTaskStatus\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(taskRepository: TaskRepository)\n                    \n                \n                        \n                            \n                                Defined in src/tasks/tasks.service.ts:22\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        taskRepository\n                                                  \n                                                        \n                                                                        TaskRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTask\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTask(createTaskData: CreateTaskDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTaskData\n                                    \n                                                CreateTaskDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTask\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTask(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:107\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTaskById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTaskById(id: number, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTasks\n                        \n                        \n                    \n                \n            \n            \n                \ngetTasks(filterDto: GetTasksFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetTasksFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTaskStatus\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTaskStatus(id: number, status: TaskStatus, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/tasks/tasks.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    status\n                                    \n                                                TaskStatus\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common';\nimport { TaskStatus } from './task-status.enum';\nimport { CreateTaskDto } from './dto/creat-task.dto';\nimport { GetTasksFilterDto } from './dto/get-tasks-filter.dto';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { TaskRepository } from './task.repository';\nimport { Task } from './task.entity';\nimport { User } from '../auth/user.entity';\n\n@Injectable()\nexport class TasksService {\n\n  constructor(\n    @InjectRepository(TaskRepository)\n    private taskRepository: TaskRepository,\n  ) {}\n\n  // private tasks: Task[] = [];\n\n  getTasks(filterDto: GetTasksFilterDto, user: User): Promise {\n    return this.taskRepository.getTasks(filterDto, user)\n  }\n\n  // getAllTasks(): Task[] {\n  //   return this.tasks;\n  // }\n\n  // getTasksWithFilters(filterDto: GetTasksFilterDto): Task[] {\n  //   const { search, status } = filterDto\n\n  //   let tasks = this.getAllTasks()\n\n  //   if (status) {\n  //     tasks = tasks.filter(task => task.status === status)\n  //   }\n\n  //   if (search) {\n  //     tasks = tasks.filter(task => task.title.includes(search) || task.description.includes(search))\n  //   }\n\n  //   return tasks;\n  // }\n\n  async getTaskById(id: number, user: User): Promise {\n    const found = await this.taskRepository.findOne(id, {where: {id, userId: user.id}});\n\n    if (!found) {\n      throw new NotFoundException(`Task with ID \"${id}\" not found`)\n    }\n\n    return found\n  }\n\n  // getTaskById(id: string): Task {\n  //   const found = this.tasks.find(task => task.id === id);\n\n  //   if (!found) {\n  //     throw new NotFoundException(`Task with ID \"${id}\" not found`)\n  //   }\n\n  //   return found\n  // }\n\n  createTask(createTaskData: CreateTaskDto, user: User): Promise {\n    return this.taskRepository.createTask(createTaskData, user)\n  }\n\n\n  // createTask(createTaskData: CreateTaskDto): Task {\n  //   const { title, description } = createTaskData;\n  //   const task: Task = {\n  //     id: uuid(),\n  //     title,\n  //     description,\n  //     status: TaskStatus.OPEN\n  //   }\n\n  //   this.tasks.push(task)\n\n  //   return task;\n  // }\n\n  async updateTaskStatus(id: number, status: TaskStatus, user: User): Promise {\n    const task = await this.getTaskById(id, user);\n    task.status = status;\n    await task.save()\n    return task;\n  }\n\n  // updateTaskStatus(id: string, status: TaskStatus) {\n  //   const task = this.getTaskById(id);\n  //   task.status = status;\n  //   return task;\n  // }\n\n  async deleteTask(id: number, user: User): Promise {\n    const result = await this.taskRepository.delete({id, userId: user.id});\n\n      if (result.affected === 0) {\n      throw new NotFoundException(`Task with ID \"${id}\" not found`)\n    }\n  }\n\n  // deleteTaskById(id: string): void {\n  //   this.getTaskById(id);\n    \n  //   this.tasks = this.tasks.filter(task => task.id !== id);\n  // }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                salt\n                            \n                            \n                                tasks\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/user.entity.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/user.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            salt\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/user.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            tasks\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Task[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined, {eager: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/user.entity.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            username\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/user.entity.ts:23\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/user.entity.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity, Entity, PrimaryGeneratedColumn, Column, Unique, OneToMany } from \"typeorm\";\nimport * as bcrypt from 'bcrypt'\nimport { Task } from \"../tasks/task.entity\";\n\n@Entity()\n@Unique(['username'])\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  username: string;\n\n  @Column()\n  password: string;\n\n  @Column()\n  salt: string;\n\n  @OneToMany(type => Task, task => task.user, {eager: true})\n  tasks: Task[];\n\n  async validatePassword(password: string): Promise {\n    const hash = await bcrypt.hash(password, this.salt);\n    return hash === this.password;\n  }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                hashPassword\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                validateUserPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/user.repository.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/user.repository.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validateUserPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUserPassword(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/user.repository.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Repository, EntityRepository } from \"typeorm\";\nimport * as bcrypt from 'bcrypt';\nimport { User } from \"./user.entity\";\nimport { AuthCredentialsDto } from \"./dto/auth-credentials.dto\";\nimport { ConflictException, InternalServerErrorException } from \"@nestjs/common\";\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n  async signUp(authCredentialsDto: AuthCredentialsDto): Promise {\n    const { password, username } = authCredentialsDto\n\n    const user = new User();\n\n    user.username = username;\n    user.salt = await bcrypt.genSalt();\n    user.password = await this.hashPassword(password, user.salt);\n\n    try {\n      await user.save()\n    } catch (e) {\n      if (e.code === '23505') { // ? this is the code generated by postgres on unique fail\n        throw new ConflictException('Username already exists...');\n      } else {\n        throw new InternalServerErrorException()\n      }\n    }\n  }\n\n  async validateUserPassword(authCredentialsDto: AuthCredentialsDto): Promise {\n    const {password, username} = authCredentialsDto;\n\n    const user = await this.findOne({username})\n\n    if (user && await user.validatePassword(password)) {\n      return user.username;\n    }\n    return null;\n  }\n\n  private async hashPassword(password: string, salt: string): Promise {\n    return bcrypt.hash(password, salt)\n  }\n}\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                config/config.interface.ts\n            \n            interface\n            IConfig\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                config/config.interface.ts\n            \n            interface\n            IConfigDB\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                config/config.interface.ts\n            \n            interface\n            IConfigJWT\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                config/config.interface.ts\n            \n            interface\n            IConfigServer\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.module.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-credentials.dto.ts\n            \n            class\n            AuthCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt-strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/user.entity.ts\n            \n            class\n            User\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            dbConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/dto/creat-task.dto.ts\n            \n            class\n            CreateTaskDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/dto/get-tasks-filter.dto.ts\n            \n            class\n            GetTasksFilterDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/tasks/pipes/task-status-validation.pipe.ts\n            \n            class\n            TaskStatusValidationPipe\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/task-status.enum.ts\n            \n            variable\n            TaskStatusList\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/tasks/task.entity.ts\n            \n            class\n            Task\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/tasks/task.repository.ts\n            \n            class\n            TaskRepository\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/tasks/tasks.controller.ts\n            \n            controller\n            TasksController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/tasks/tasks.service.ts\n            \n            injectable\n            TasksService\n            \n                0 %\n                (0/7)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^7.0.0\n        \n            @nestjs/core : ^7.0.0\n        \n            @nestjs/jwt : ^7.0.0\n        \n            @nestjs/passport : ^7.0.0\n        \n            @nestjs/platform-express : ^7.0.0\n        \n            @nestjs/swagger : ^4.5.3\n        \n            @nestjs/typeorm : ^7.0.0\n        \n            bcrypt : ^4.0.1\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.11.1\n        \n            config : ^3.3.1\n        \n            passport : ^0.4.1\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^8.0.2\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^6.5.4\n        \n            swagger-ui-express : ^4.1.4\n        \n            typeorm : ^0.2.24\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TaskStatus   (src/.../task-status.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/tasks/task-status.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TaskStatus\n                    \n                \n                        \n                            \n                                 OPEN\n                            \n                        \n                        \n                            \n                                Value : OPEN\n                            \n                        \n                        \n                            \n                                 IN_PROGRESS\n                            \n                        \n                        \n                            \n                                Value : IN_PROGRESS\n                            \n                        \n                        \n                            \n                                 DONE\n                            \n                        \n                        \n                            \n                                Value : DONE\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nnestjs-tasks\nNest JS Tasks management API\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications, heavily inspired by Angular.\n    \n\n\n\n\n\n\n\n\n\n  \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\n  Nest is MIT licensed.\nNotes\nCreate Module:\nnest g module name\nController\n\ngenerate a controller without tests spec\n\nnest g controller name —no-spec\nService\n\ngenerate a service without tests spec\n\nnest g service name —no-spec\nDTO\n\n(Data transfer Object)\n\nTypeOrm\n\nCreate Postgres Database (pgadmin  and postgres)\n\nyarn add @nestjs/typeorm typeorm p\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TasksModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TasksModule\n\n\n\ncluster_TasksModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTasksModule\n\nTasksModule\n\nTasksModule -->\n\nAuthModule->TasksModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nJwtStrategy \n\nJwtStrategy \n\nJwtStrategy  -->\n\nAuthModule->JwtStrategy \n\n\n\nAppModule -->\n\nTasksModule->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTasksService\n\nTasksService\n\nTasksModule -->\n\nTasksService->TasksModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        3 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            dbConfig   (src/.../typeorm.config.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            jwtConfig   (src/.../auth.module.ts)\n                        \n                        \n                            TaskStatusList   (src/.../task-status.enum.ts)\n                        \n                        \n                            typeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dbConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IConfigDB\n\n                        \n                    \n                    \n                        \n                            Default value : config.get('db')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            typeOrmConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: dbConfig.type,\n  host: dbConfig.host,\n  port: dbConfig.port,\n  username: dbConfig.username,\n  password: dbConfig.password,\n  database: dbConfig.database,\n  entities: [__dirname + \"/../**/*.entity.{js,ts}\"], //? use all entities from previous folder\n  synchronize: dbConfig.synchronize, // ! disable in production\n}\n                        \n                    \n\n\n            \n        \n\n    src/auth/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data, req:ExecutionContext): User => {\n  // ? extracting user from request object\n  return req.switchToHttp().getRequest().user;\n})\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         IConfigJWT\n\n                        \n                    \n                    \n                        \n                            Default value : config.get('jwt')\n                        \n                    \n\n\n            \n        \n\n    src/tasks/task-status.enum.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            TaskStatusList\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     []\n\n                        \n                    \n                    \n                        \n                            Default value : [\n  TaskStatus.OPEN,\n  TaskStatus.IN_PROGRESS,\n  TaskStatus.DONE\n]\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
